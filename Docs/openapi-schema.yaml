openapi: 3.0.3
info:
  title: SIMS API
  version: 1.0.0
  description: Student Information Management System API schema.
paths:
  /api/assessment-scores/:
    get:
      operationId: assessment_scores_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - assessment-scores
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAssessmentScoreList'
          description: ''
    post:
      operationId: assessment_scores_create
      tags:
      - assessment-scores
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssessmentScore'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AssessmentScore'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AssessmentScore'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssessmentScore'
          description: ''
  /api/assessment-scores/{id}/:
    get:
      operationId: assessment_scores_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this assessment score.
        required: true
      tags:
      - assessment-scores
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssessmentScore'
          description: ''
    put:
      operationId: assessment_scores_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this assessment score.
        required: true
      tags:
      - assessment-scores
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssessmentScore'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AssessmentScore'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AssessmentScore'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssessmentScore'
          description: ''
    patch:
      operationId: assessment_scores_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this assessment score.
        required: true
      tags:
      - assessment-scores
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAssessmentScore'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAssessmentScore'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAssessmentScore'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssessmentScore'
          description: ''
    delete:
      operationId: assessment_scores_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this assessment score.
        required: true
      tags:
      - assessment-scores
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/assessments/:
    get:
      operationId: assessments_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - assessments
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAssessmentList'
          description: ''
    post:
      operationId: assessments_create
      tags:
      - assessments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assessment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Assessment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Assessment'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assessment'
          description: ''
  /api/assessments/{id}/:
    get:
      operationId: assessments_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this assessment.
        required: true
      tags:
      - assessments
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assessment'
          description: ''
    put:
      operationId: assessments_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this assessment.
        required: true
      tags:
      - assessments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assessment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Assessment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Assessment'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assessment'
          description: ''
    patch:
      operationId: assessments_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this assessment.
        required: true
      tags:
      - assessments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAssessment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAssessment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAssessment'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assessment'
          description: ''
    delete:
      operationId: assessments_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this assessment.
        required: true
      tags:
      - assessments
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/attendance/:
    get:
      operationId: attendance_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - attendance
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAttendanceList'
          description: ''
    post:
      operationId: attendance_create
      tags:
      - attendance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attendance'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Attendance'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Attendance'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendance'
          description: ''
  /api/attendance/{id}/:
    get:
      operationId: attendance_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this attendance.
        required: true
      tags:
      - attendance
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendance'
          description: ''
    put:
      operationId: attendance_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this attendance.
        required: true
      tags:
      - attendance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attendance'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Attendance'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Attendance'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendance'
          description: ''
    patch:
      operationId: attendance_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this attendance.
        required: true
      tags:
      - attendance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAttendance'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAttendance'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAttendance'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendance'
          description: ''
    delete:
      operationId: attendance_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this attendance.
        required: true
      tags:
      - attendance
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/attendance/eligibility/:
    get:
      operationId: attendance_eligibility_retrieve
      description: Check if a student is eligible based on attendance.
      tags:
      - attendance
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendance'
          description: ''
  /api/attendance/percentage/:
    get:
      operationId: attendance_percentage_retrieve
      description: Get attendance percentage for a student in a section.
      tags:
      - attendance
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendance'
          description: ''
  /api/attendance/section-summary/:
    get:
      operationId: attendance_section_summary_retrieve
      description: Get attendance summary for a section.
      tags:
      - attendance
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendance'
          description: ''
  /api/auth/token/:
    post:
      operationId: auth_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/auth/token/refresh/:
    post:
      operationId: auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/courses/:
    get:
      operationId: courses_list
      parameters:
      - in: query
        name: credits
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: program
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - courses
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCourseList'
          description: ''
    post:
      operationId: courses_create
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Course'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
  /api/courses/{id}/:
    get:
      operationId: courses_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this course.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
    put:
      operationId: courses_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this course.
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Course'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
    patch:
      operationId: courses_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this course.
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCourse'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCourse'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCourse'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
    delete:
      operationId: courses_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this course.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/enrollments/:
    get:
      operationId: enrollments_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - enrollments
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEnrollmentList'
          description: ''
    post:
      operationId: enrollments_create
      tags:
      - enrollments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Enrollment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Enrollment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Enrollment'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enrollment'
          description: ''
  /api/enrollments/{id}/:
    get:
      operationId: enrollments_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this enrollment.
        required: true
      tags:
      - enrollments
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enrollment'
          description: ''
    put:
      operationId: enrollments_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this enrollment.
        required: true
      tags:
      - enrollments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Enrollment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Enrollment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Enrollment'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enrollment'
          description: ''
    patch:
      operationId: enrollments_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this enrollment.
        required: true
      tags:
      - enrollments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEnrollment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEnrollment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEnrollment'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enrollment'
          description: ''
    delete:
      operationId: enrollments_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this enrollment.
        required: true
      tags:
      - enrollments
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/pending-changes/:
    get:
      operationId: pending_changes_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - pending-changes
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPendingChangeList'
          description: ''
  /api/pending-changes/{id}/:
    get:
      operationId: pending_changes_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this pending change.
        required: true
      tags:
      - pending-changes
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingChange'
          description: ''
  /api/programs/:
    get:
      operationId: programs_list
      parameters:
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - programs
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProgramList'
          description: ''
    post:
      operationId: programs_create
      tags:
      - programs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Program'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Program'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Program'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Program'
          description: ''
  /api/programs/{id}/:
    get:
      operationId: programs_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this program.
        required: true
      tags:
      - programs
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Program'
          description: ''
    put:
      operationId: programs_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this program.
        required: true
      tags:
      - programs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Program'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Program'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Program'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Program'
          description: ''
    patch:
      operationId: programs_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this program.
        required: true
      tags:
      - programs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProgram'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProgram'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProgram'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Program'
          description: ''
    delete:
      operationId: programs_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this program.
        required: true
      tags:
      - programs
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/requests/:
    get:
      operationId: requests_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - requests
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRequestList'
          description: ''
    post:
      operationId: requests_create
      tags:
      - requests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Request'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Request'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
          description: ''
  /api/requests/{id}/:
    get:
      operationId: requests_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this request.
        required: true
      tags:
      - requests
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
          description: ''
    put:
      operationId: requests_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this request.
        required: true
      tags:
      - requests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Request'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Request'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
          description: ''
    patch:
      operationId: requests_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this request.
        required: true
      tags:
      - requests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
          description: ''
    delete:
      operationId: requests_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this request.
        required: true
      tags:
      - requests
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/requests/{id}/transition/:
    post:
      operationId: requests_transition_create
      description: Transition request status
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this request.
        required: true
      tags:
      - requests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Request'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Request'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
          description: ''
  /api/results/:
    get:
      operationId: results_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - results
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResultList'
          description: ''
    post:
      operationId: results_create
      tags:
      - results
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Result'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Result'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Result'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
          description: ''
  /api/results/{id}/:
    get:
      operationId: results_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this result.
        required: true
      tags:
      - results
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
          description: ''
    put:
      operationId: results_update
      description: Override update to prevent editing published or frozen results
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this result.
        required: true
      tags:
      - results
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Result'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Result'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Result'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
          description: ''
    patch:
      operationId: results_partial_update
      description: Override partial_update to prevent editing published or frozen
        results
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this result.
        required: true
      tags:
      - results
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedResult'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedResult'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedResult'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
          description: ''
    delete:
      operationId: results_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this result.
        required: true
      tags:
      - results
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/results/approve-change/:
    post:
      operationId: results_approve_change_create
      description: Approve or reject a change request
      tags:
      - results
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Result'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Result'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Result'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
          description: ''
  /api/results/change-request/:
    post:
      operationId: results_change_request_create
      description: Create a change request for a published result
      tags:
      - results
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Result'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Result'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Result'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
          description: ''
  /api/results/freeze/:
    post:
      operationId: results_freeze_create
      description: Freeze a result (final state, no more changes allowed)
      tags:
      - results
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Result'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Result'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Result'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
          description: ''
  /api/results/publish/:
    post:
      operationId: results_publish_create
      description: Publish a result (transition from draft to published)
      tags:
      - results
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Result'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Result'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Result'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
          description: ''
  /api/sections/:
    get:
      operationId: sections_list
      parameters:
      - in: query
        name: course
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: term
        schema:
          type: string
      tags:
      - sections
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSectionList'
          description: ''
    post:
      operationId: sections_create
      tags:
      - sections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Section'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Section'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Section'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
          description: ''
  /api/sections/{id}/:
    get:
      operationId: sections_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this section.
        required: true
      tags:
      - sections
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
          description: ''
    put:
      operationId: sections_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this section.
        required: true
      tags:
      - sections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Section'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Section'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Section'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
          description: ''
    patch:
      operationId: sections_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this section.
        required: true
      tags:
      - sections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSection'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSection'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSection'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
          description: ''
    delete:
      operationId: sections_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this section.
        required: true
      tags:
      - sections
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/sections/{section_id}/enroll/:
    post:
      operationId: sections_enroll_create
      description: Enroll a student in a specific section
      parameters:
      - in: path
        name: section_id
        schema:
          type: integer
        required: true
      tags:
      - sections
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/students/:
    get:
      operationId: students_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: program
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
      tags:
      - students
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedStudentList'
          description: ''
    post:
      operationId: students_create
      tags:
      - students
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Student'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Student'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
          description: ''
  /api/students/{id}/:
    get:
      operationId: students_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this student.
        required: true
      tags:
      - students
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
          description: ''
    put:
      operationId: students_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this student.
        required: true
      tags:
      - students
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Student'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Student'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
          description: ''
    patch:
      operationId: students_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this student.
        required: true
      tags:
      - students
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedStudent'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedStudent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedStudent'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
          description: ''
    delete:
      operationId: students_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this student.
        required: true
      tags:
      - students
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/terms/:
    get:
      operationId: terms_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - closed
          - open
        description: |-
          * `open` - Open
          * `closed` - Closed
      tags:
      - terms
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTermList'
          description: ''
    post:
      operationId: terms_create
      tags:
      - terms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Term'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Term'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Term'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Term'
          description: ''
  /api/terms/{id}/:
    get:
      operationId: terms_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this term.
        required: true
      tags:
      - terms
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Term'
          description: ''
    put:
      operationId: terms_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this term.
        required: true
      tags:
      - terms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Term'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Term'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Term'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Term'
          description: ''
    patch:
      operationId: terms_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this term.
        required: true
      tags:
      - terms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTerm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTerm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTerm'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Term'
          description: ''
    delete:
      operationId: terms_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this term.
        required: true
      tags:
      - terms
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/transcripts/{student_id}/:
    get:
      operationId: transcripts_retrieve
      description: Generate and download transcript for a student
      parameters:
      - in: path
        name: student_id
        schema:
          type: integer
        required: true
      tags:
      - transcripts
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/transcripts/enqueue/:
    post:
      operationId: transcripts_enqueue_create
      description: |-
        Enqueue transcript generation as a background job.

        Request body:
            {
                "student_id": int,
                "email": str (optional)
            }
      tags:
      - transcripts
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/transcripts/verify/{token}/:
    get:
      operationId: transcripts_verify_retrieve
      description: Verify a transcript QR token
      parameters:
      - in: path
        name: token
        schema:
          type: string
        required: true
      tags:
      - transcripts
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
components:
  schemas:
    Assessment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        section:
          type: integer
        type:
          type: string
          maxLength: 64
        weight:
          type: integer
          maximum: 32767
          minimum: 0
      required:
      - id
      - section
      - type
    AssessmentScore:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        assessment:
          type: integer
        student:
          type: integer
        score:
          type: number
          format: double
        max_score:
          type: number
          format: double
      required:
      - assessment
      - id
      - student
    Attendance:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        section:
          type: integer
        student:
          type: integer
        date:
          type: string
          format: date
        present:
          type: boolean
        reason:
          type: string
          maxLength: 255
      required:
      - date
      - id
      - section
      - student
    Course:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        code:
          type: string
          maxLength: 32
        title:
          type: string
          maxLength: 255
        credits:
          type: integer
          maximum: 32767
          minimum: 0
        program:
          type: integer
      required:
      - code
      - id
      - program
      - title
    Enrollment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        student:
          type: integer
        section:
          type: integer
        term:
          type: string
          maxLength: 32
        status:
          type: string
          maxLength: 32
        enrolled_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - enrolled_at
      - id
      - section
      - student
    PaginatedAssessmentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Assessment'
    PaginatedAssessmentScoreList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/AssessmentScore'
    PaginatedAttendanceList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Attendance'
    PaginatedCourseList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Course'
    PaginatedEnrollmentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Enrollment'
    PaginatedPendingChangeList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PendingChange'
    PaginatedProgramList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Program'
    PaginatedRequestList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Request'
    PaginatedResultList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Result'
    PaginatedSectionList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Section'
    PaginatedStudentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Student'
    PaginatedTermList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Term'
    PatchedAssessment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        section:
          type: integer
        type:
          type: string
          maxLength: 64
        weight:
          type: integer
          maximum: 32767
          minimum: 0
    PatchedAssessmentScore:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        assessment:
          type: integer
        student:
          type: integer
        score:
          type: number
          format: double
        max_score:
          type: number
          format: double
    PatchedAttendance:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        section:
          type: integer
        student:
          type: integer
        date:
          type: string
          format: date
        present:
          type: boolean
        reason:
          type: string
          maxLength: 255
    PatchedCourse:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        code:
          type: string
          maxLength: 32
        title:
          type: string
          maxLength: 255
        credits:
          type: integer
          maximum: 32767
          minimum: 0
        program:
          type: integer
    PatchedEnrollment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        student:
          type: integer
        section:
          type: integer
        term:
          type: string
          maxLength: 32
        status:
          type: string
          maxLength: 32
        enrolled_at:
          type: string
          format: date-time
          readOnly: true
    PatchedProgram:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 128
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedRequest:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        student:
          type: integer
        type:
          $ref: '#/components/schemas/TypeEnum'
        status:
          $ref: '#/components/schemas/RequestStatusEnum'
        notes:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        processed_by:
          type: string
          maxLength: 128
    PatchedResult:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        student:
          type: integer
        section:
          type: integer
        final_grade:
          type: string
          maxLength: 8
        state:
          allOf:
          - $ref: '#/components/schemas/StateEnum'
          readOnly: true
        is_published:
          type: boolean
          readOnly: true
        published_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        published_by:
          type: string
          readOnly: true
        frozen_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        frozen_by:
          type: string
          readOnly: true
    PatchedSection:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        course:
          type: integer
        term:
          type: string
          maxLength: 32
        teacher:
          type: string
          maxLength: 128
        capacity:
          type: integer
          maximum: 2147483647
          minimum: 0
    PatchedStudent:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        reg_no:
          type: string
          maxLength: 32
        name:
          type: string
          maxLength: 255
        program:
          type: string
          maxLength: 128
        status:
          type: string
          maxLength: 32
    PatchedTerm:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 32
        status:
          $ref: '#/components/schemas/TermStatusEnum'
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
    PendingChange:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        result:
          type: integer
        requested_by:
          type: string
          maxLength: 128
        approved_by:
          type: string
          maxLength: 128
        status:
          allOf:
          - $ref: '#/components/schemas/PendingChangeStatusEnum'
          readOnly: true
        new_grade:
          type: string
          maxLength: 8
        reason:
          type: string
        requested_at:
          type: string
          format: date-time
          readOnly: true
        resolved_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
      required:
      - id
      - new_grade
      - requested_at
      - requested_by
      - resolved_at
      - result
      - status
    PendingChangeStatusEnum:
      enum:
      - pending
      - approved
      - rejected
      type: string
      description: |-
        * `pending` - Pending
        * `approved` - Approved
        * `rejected` - Rejected
    Program:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 128
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - name
      - updated_at
    Request:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        student:
          type: integer
        type:
          $ref: '#/components/schemas/TypeEnum'
        status:
          $ref: '#/components/schemas/RequestStatusEnum'
        notes:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        processed_by:
          type: string
          maxLength: 128
      required:
      - created_at
      - id
      - student
      - type
      - updated_at
    RequestStatusEnum:
      enum:
      - pending
      - approved
      - rejected
      - completed
      type: string
      description: |-
        * `pending` - Pending
        * `approved` - Approved
        * `rejected` - Rejected
        * `completed` - Completed
    Result:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        student:
          type: integer
        section:
          type: integer
        final_grade:
          type: string
          maxLength: 8
        state:
          allOf:
          - $ref: '#/components/schemas/StateEnum'
          readOnly: true
        is_published:
          type: boolean
          readOnly: true
        published_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        published_by:
          type: string
          readOnly: true
        frozen_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        frozen_by:
          type: string
          readOnly: true
      required:
      - frozen_at
      - frozen_by
      - id
      - is_published
      - published_at
      - published_by
      - section
      - state
      - student
    Section:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        course:
          type: integer
        term:
          type: string
          maxLength: 32
        teacher:
          type: string
          maxLength: 128
        capacity:
          type: integer
          maximum: 2147483647
          minimum: 0
      required:
      - course
      - id
      - teacher
      - term
    StateEnum:
      enum:
      - draft
      - published
      - frozen
      type: string
      description: |-
        * `draft` - Draft
        * `published` - Published
        * `frozen` - Frozen
    Student:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        reg_no:
          type: string
          maxLength: 32
        name:
          type: string
          maxLength: 255
        program:
          type: string
          maxLength: 128
        status:
          type: string
          maxLength: 32
      required:
      - id
      - name
      - program
      - reg_no
      - status
    Term:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 32
        status:
          $ref: '#/components/schemas/TermStatusEnum'
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
      required:
      - end_date
      - id
      - name
      - start_date
    TermStatusEnum:
      enum:
      - open
      - closed
      type: string
      description: |-
        * `open` - Open
        * `closed` - Closed
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    TypeEnum:
      enum:
      - transcript
      - bonafide
      - noc
      - other
      type: string
      description: |-
        * `transcript` - Transcript
        * `bonafide` - Bonafide Certificate
        * `noc` - No Objection Certificate
        * `other` - Other
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
