name: Backend CI

on:
  push:
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  lint:
    name: Ruff Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Ruff
        run: ruff check .

  mypy:
    name: Static Type Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run mypy
        env:
          DJANGO_SETTINGS_MODULE: sims_backend.settings
          PYTHONPATH: ${{ github.workspace }}/backend
        run: mypy .

  tests:
    name: Pytest Suite
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        env:
          DJANGO_SECRET_KEY: test-secret-key
          DJANGO_DEBUG: 'False'
          DB_ENGINE: django.db.backends.sqlite3
          DB_NAME: /tmp/test_db.sqlite3
          DB_HOST: ''
          DB_PORT: '0'
        run: pytest tests --cov=. --cov-report=xml --cov-report=html --cov-fail-under=80
      - name: Fail if no tests ran
        if: always()
        run: |
          if [ ! -f coverage.xml ] && [ ! -d htmlcov ]; then
            echo "ERROR: No coverage output found. Pytest may have collected no tests."
            exit 1
          fi
      - name: Check coverage threshold
        run: |
          COVERAGE=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); print(tree.getroot().get('line-rate'))")
          COVERAGE_PCT=$(python -c "print(round(float($COVERAGE) * 100, 2))")
          echo "Coverage: $COVERAGE_PCT%"
          if (( $(echo "$COVERAGE_PCT < 80" | bc -l) )); then
            echo "ERROR: Coverage $COVERAGE_PCT% is below 80% threshold"
            exit 1
          fi
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: |
            backend/htmlcov
            backend/coverage.xml
          if-no-files-found: error
